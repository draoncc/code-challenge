// Code generated by protoc-gen-go. DO NOT EDIT.
// source: templates.proto

/*
Package templates is a generated protocol buffer package.

It is generated from these files:
	templates.proto

It has these top-level messages:
	Template
	CSS
	UUID
	Boolean
*/
package templates

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Template struct {
	Id                    *UUID  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type                  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Data                  string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	MetaName              string `protobuf:"bytes,4,opt,name=meta_name,json=metaName" json:"meta_name,omitempty"`
	CssId                 *UUID  `protobuf:"bytes,5,opt,name=css_id,json=cssId" json:"css_id,omitempty"`
	MetaNameTranslationId *UUID  `protobuf:"bytes,6,opt,name=meta_name_translation_id,json=metaNameTranslationId" json:"meta_name_translation_id,omitempty"`
}

func (m *Template) Reset()                    { *m = Template{} }
func (m *Template) String() string            { return proto.CompactTextString(m) }
func (*Template) ProtoMessage()               {}
func (*Template) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Template) GetId() *UUID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Template) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Template) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Template) GetMetaName() string {
	if m != nil {
		return m.MetaName
	}
	return ""
}

func (m *Template) GetCssId() *UUID {
	if m != nil {
		return m.CssId
	}
	return nil
}

func (m *Template) GetMetaNameTranslationId() *UUID {
	if m != nil {
		return m.MetaNameTranslationId
	}
	return nil
}

type CSS struct {
	Id       *UUID  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Data     string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	MetaName string `protobuf:"bytes,3,opt,name=meta_name,json=metaName" json:"meta_name,omitempty"`
}

func (m *CSS) Reset()                    { *m = CSS{} }
func (m *CSS) String() string            { return proto.CompactTextString(m) }
func (*CSS) ProtoMessage()               {}
func (*CSS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CSS) GetId() *UUID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CSS) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *CSS) GetMetaName() string {
	if m != nil {
		return m.MetaName
	}
	return ""
}

type UUID struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *UUID) Reset()                    { *m = UUID{} }
func (m *UUID) String() string            { return proto.CompactTextString(m) }
func (*UUID) ProtoMessage()               {}
func (*UUID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UUID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Boolean struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Boolean) Reset()                    { *m = Boolean{} }
func (m *Boolean) String() string            { return proto.CompactTextString(m) }
func (*Boolean) ProtoMessage()               {}
func (*Boolean) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Boolean) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*Template)(nil), "templates.Template")
	proto.RegisterType((*CSS)(nil), "templates.CSS")
	proto.RegisterType((*UUID)(nil), "templates.UUID")
	proto.RegisterType((*Boolean)(nil), "templates.Boolean")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Templates service

type TemplatesClient interface {
	GetTemplate(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Template, error)
	GetTemplateChain(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Templates_GetTemplateChainClient, error)
	HasTemplate(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Boolean, error)
}

type templatesClient struct {
	cc *grpc.ClientConn
}

func NewTemplatesClient(cc *grpc.ClientConn) TemplatesClient {
	return &templatesClient{cc}
}

func (c *templatesClient) GetTemplate(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := grpc.Invoke(ctx, "/templates.Templates/GetTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetTemplateChain(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Templates_GetTemplateChainClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Templates_serviceDesc.Streams[0], c.cc, "/templates.Templates/GetTemplateChain", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesGetTemplateChainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_GetTemplateChainClient interface {
	Recv() (*Template, error)
	grpc.ClientStream
}

type templatesGetTemplateChainClient struct {
	grpc.ClientStream
}

func (x *templatesGetTemplateChainClient) Recv() (*Template, error) {
	m := new(Template)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) HasTemplate(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := grpc.Invoke(ctx, "/templates.Templates/HasTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Templates service

type TemplatesServer interface {
	GetTemplate(context.Context, *UUID) (*Template, error)
	GetTemplateChain(*UUID, Templates_GetTemplateChainServer) error
	HasTemplate(context.Context, *UUID) (*Boolean, error)
}

func RegisterTemplatesServer(s *grpc.Server, srv TemplatesServer) {
	s.RegisterService(&_Templates_serviceDesc, srv)
}

func _Templates_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templates.Templates/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetTemplate(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetTemplateChain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).GetTemplateChain(m, &templatesGetTemplateChainServer{stream})
}

type Templates_GetTemplateChainServer interface {
	Send(*Template) error
	grpc.ServerStream
}

type templatesGetTemplateChainServer struct {
	grpc.ServerStream
}

func (x *templatesGetTemplateChainServer) Send(m *Template) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_HasTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).HasTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/templates.Templates/HasTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).HasTemplate(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Templates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "templates.Templates",
	HandlerType: (*TemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemplate",
			Handler:    _Templates_GetTemplate_Handler,
		},
		{
			MethodName: "HasTemplate",
			Handler:    _Templates_HasTemplate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTemplateChain",
			Handler:       _Templates_GetTemplateChain_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "templates.proto",
}

func init() { proto.RegisterFile("templates.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xbb, 0xe9, 0x1f, 0x93, 0xc9, 0xa1, 0x32, 0x2a, 0x2c, 0x2a, 0xb4, 0xec, 0x41, 0x7a,
	0x2a, 0x52, 0xf5, 0xe6, 0xc9, 0x0a, 0x36, 0x17, 0x0f, 0x69, 0x8b, 0xc7, 0x30, 0x76, 0x17, 0x0c,
	0xe4, 0x1f, 0xdd, 0x55, 0xf0, 0xc5, 0x7c, 0x20, 0x9f, 0x44, 0x92, 0x26, 0x69, 0x2a, 0x2d, 0xf4,
	0x36, 0xf3, 0xe5, 0xfb, 0xcd, 0xe4, 0xdb, 0x5d, 0xe8, 0x1b, 0x15, 0x67, 0x11, 0x19, 0xa5, 0xc7,
	0xd9, 0x3a, 0x35, 0x29, 0x3a, 0xb5, 0x20, 0x7e, 0x19, 0xd8, 0x8b, 0xb2, 0xc3, 0x01, 0x58, 0xa1,
	0xe4, 0x6c, 0xc8, 0x46, 0xee, 0xa4, 0x3f, 0xde, 0x52, 0xcb, 0xa5, 0xf7, 0xec, 0x5b, 0xa1, 0x44,
	0x84, 0x8e, 0xf9, 0xce, 0x14, 0xb7, 0x86, 0x6c, 0xe4, 0xf8, 0x45, 0x9d, 0x6b, 0x92, 0x0c, 0xf1,
	0xf6, 0x46, 0xcb, 0x6b, 0xbc, 0x02, 0x27, 0x56, 0x86, 0x82, 0x84, 0x62, 0xc5, 0x3b, 0xc5, 0x07,
	0x3b, 0x17, 0x5e, 0x29, 0x56, 0x78, 0x03, 0xbd, 0x95, 0xd6, 0x41, 0x28, 0x79, 0x77, 0xff, 0xa6,
	0xee, 0x4a, 0x6b, 0x4f, 0xe2, 0x0c, 0x78, 0x3d, 0x24, 0x30, 0x6b, 0x4a, 0x74, 0x44, 0x26, 0x4c,
	0x93, 0x9c, 0xec, 0xed, 0x27, 0x2f, 0xaa, 0x25, 0x8b, 0xad, 0xdd, 0x93, 0xe2, 0x0d, 0xda, 0xd3,
	0xf9, 0xfc, 0xa8, 0x78, 0x45, 0x14, 0xeb, 0x50, 0x94, 0xf6, 0x6e, 0x14, 0x71, 0x0d, 0x9d, 0x1c,
	0xc6, 0x73, 0xe8, 0x7e, 0x51, 0xf4, 0xa9, 0x8a, 0xe1, 0x8e, 0xbf, 0x69, 0xc4, 0x00, 0x4e, 0x9e,
	0xd2, 0x34, 0x52, 0x94, 0xec, 0x1a, 0xec, 0xd2, 0x30, 0xf9, 0x61, 0xe0, 0x54, 0x87, 0xaf, 0xf1,
	0x01, 0xdc, 0x17, 0x65, 0xea, 0xcb, 0xf8, 0xff, 0x87, 0x97, 0x67, 0x0d, 0xa1, 0x72, 0x89, 0x16,
	0x3e, 0xc2, 0x69, 0x03, 0x9b, 0x7e, 0x50, 0x98, 0x1c, 0xcb, 0xde, 0x32, 0xbc, 0x07, 0x77, 0x46,
	0xfa, 0xf0, 0x52, 0x6c, 0x08, 0x65, 0x18, 0xd1, 0x7a, 0xef, 0x15, 0xef, 0xe8, 0xee, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0xf6, 0xf1, 0xdd, 0x52, 0x5a, 0x02, 0x00, 0x00,
}
